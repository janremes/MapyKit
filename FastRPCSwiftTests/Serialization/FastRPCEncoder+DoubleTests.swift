//
//  FastRPCEncoder+DoubleTests.swift
//  FastRPCSwiftTests
//
//  Created by Josef Dolezal on 13/10/2018.
//  Copyright Â© 2018 Josef Dolezal. All rights reserved.
//

import XCTest
import FastRPCSwift

class FastRPCEncoder_DoubleTests: XCTestCase {
    let encoder = FastRPCEncoder()

    func testSerializePositiveNumbers() {
        XCTAssertEqual(try [UInt8](encoder.encode(50.06451651464292)), [24, 0xBC, 0x38, 0xC0, 0x13, 0x42, 0x08, 0x49, 0x40])
        XCTAssertEqual(try [UInt8](encoder.encode(14.436357511288634)), [24, 0x80, 0xB2, 0x70, 0x40, 0x6A, 0xDF, 0x2C, 0x40])

        XCTAssertEqual(try [UInt8](encoder.encode(50.072890502005)), [24, 0x77, 0x26, 0xD9, 0x79, 0x54, 0x09, 0x49, 0x40])
        XCTAssertEqual(try [UInt8](encoder.encode(14.324434293515196)), [24, 0x80, 0xB2, 0x70, 0x40, 0x1C, 0xA6, 0x2C, 0x40])

        XCTAssertEqual(try [UInt8](encoder.encode(49.99222743840002)), [24, 0x9C, 0x0F, 0x07, 0x4F, 0x01, 0xFF, 0x48, 0x40])
        XCTAssertEqual(try [UInt8](encoder.encode(14.467256559140196)), [24, 0x80, 0xB2, 0x70, 0x40, 0x3C, 0xEF, 0x2C, 0x40])

        XCTAssertEqual(try [UInt8](encoder.encode(50.12919384639952)), [24, 0xB0, 0x90, 0x88, 0x6C, 0x89, 0x10, 0x49, 0x40])
        XCTAssertEqual(try [UInt8](encoder.encode(14.328346133765535)), [24, 0x00, 0x95, 0x04, 0xFC, 0x1C, 0xA8, 0x2C, 0x40])

        XCTAssertEqual(try [UInt8](encoder.encode(50.10208363663026)), [24, 0x51, 0x64, 0x9C, 0x13, 0x11, 0x0D, 0x49, 0x40])
        XCTAssertEqual(try [UInt8](encoder.encode(14.26300048828125)), [24, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x86, 0x2C, 0x40])
    }

    func testSerializeNegativeNumbers() {
        XCTAssertEqual(try [UInt8](encoder.encode(-50.06451651464292)), [24, 0xBC, 0x38, 0xC0, 0x13, 0x42, 0x08, 0x49, 0xC0])
        XCTAssertEqual(try [UInt8](encoder.encode(-14.436357511288634)), [24, 0x80, 0xB2, 0x70, 0x40, 0x6A, 0xDF, 0x2C, 0xC0])

        XCTAssertEqual(try [UInt8](encoder.encode(-50.072890502005)), [24, 0x77, 0x26, 0xD9, 0x79, 0x54, 0x09, 0x49, 0xC0])
        XCTAssertEqual(try [UInt8](encoder.encode(-14.324434293515196)), [24, 0x80, 0xB2, 0x70, 0x40, 0x1C, 0xA6, 0x2C, 0xC0])

        XCTAssertEqual(try [UInt8](encoder.encode(-49.99222743840002)), [24, 0x9C, 0x0F, 0x07, 0x4F, 0x01, 0xFF, 0x48, 0xC0])
        XCTAssertEqual(try [UInt8](encoder.encode(-14.467256559140196)), [24, 0x80, 0xB2, 0x70, 0x40, 0x3C, 0xEF, 0x2C, 0xC0])

        XCTAssertEqual(try [UInt8](encoder.encode(-50.12919384639952)), [24, 0xB0, 0x90, 0x88, 0x6C, 0x89, 0x10, 0x49, 0xC0])
        XCTAssertEqual(try [UInt8](encoder.encode(-14.328346133765535)), [24, 0x00, 0x95, 0x04, 0xFC, 0x1C, 0xA8, 0x2C, 0xC0])

        XCTAssertEqual(try [UInt8](encoder.encode(-50.10208363663026)), [24, 0x51, 0x64, 0x9C, 0x13, 0x11, 0x0D, 0x49, 0xC0])
        XCTAssertEqual(try [UInt8](encoder.encode(-14.26300048828125)), [24, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x86, 0x2C, 0xC0])
    }

    func testSerializeSpecialCases() {
        XCTAssertEqual(try [UInt8](encoder.encode(0.0)), [24, 0, 0, 0, 0, 0, 0, 0, 0])
    }

}
